#!/bin/bash
# Inserted into ec2 instance user-data - so is executed on boot.
# Nice way to bootstrap a vanilla ec2 AMI by talking to Ansible Tower.
# To understand Tower callbacks see http://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html#provisioning-callbacks

# Enabled pipelining for Ansible
/usr/bin/perl -ni -e 'print unless /^Defaults \s+ requiretty/x' /etc/sudoers

limit=`wget -qO- http://instance-data/latest/meta-data/private-ipv4`

# Tower callback (via SSH forwarding):
tower=54.174.148.195
tower_user=admin
tower_password=password
template_key=0c3df5340427a69d4b6bcbb87e1b7282
template_id=1944

if [[ -z ${tower} ]]; then
    logger 'ansible: could not find tower host'
    exit 1
fi

retry_attempts=10
attempt=0
while [[ $attempt -lt $retry_attempts ]]
do
  #status_code=`curl -s -i --data "host_config_key=$template_key" http://$tower/api/v1/job_templates/$template_id/callback/ | head -n 1 | awk '{print $2}'`
  status_code=`curl -f -k -H 'Content-Type: application/json' -XPOST -d '{"limit": $limit}' --user $tower_user:$tower_password https://$tower:443/api/v1/job_templates/$template_id/launch/`
  if [[ $status_code == 202 ]]
    then
    exit 0
  fi
  attempt=$(( attempt + 1 ))
  logger "bootstrap: ${status_code} received... retrying in 30 seconds (Attempt ${attempt})"
  sleep 30
done
exit 1
